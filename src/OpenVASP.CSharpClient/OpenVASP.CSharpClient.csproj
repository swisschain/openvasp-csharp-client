<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <PackageId>test</PackageId>
    <Version>0.0.1-alpha.4</Version>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Nethereum.Hex" Version="3.5.0" />
    <PackageReference Include="Nethereum.Web3" Version="3.5.0" />
    <PackageReference Include="Portable.BouncyCastle" Version="1.8.5.2" />
    <PackageReference Include="Google.Protobuf" Version="3.11.2" />
    <PackageReference Include="Google.Protobuf.Tools" Version="3.11.2" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Exceptions\" />
    <Folder Include="Implementations\" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\OpenVASP.Messaging\OpenVASP.Messaging.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\OpenVASP.ProtocolMessages\OpenVASP.ProtocolMessages.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\OpenVASP.ProtoMappers\OpenVASP.ProtoMappers.csproj" PrivateAssets="All" />
  </ItemGroup>

  <!--
    The following solves the problem that 'dotnet pack' does not include the DLLs from referenced projects.
    See https://github.com/NuGet/Home/issues/3891 for a description of the problem
    and for newer versions / workarounds / built-in methods.
  -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>
      $(TargetsForTfmSpecificBuildOutput);PackReferencedProjectOutputs
    </TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="PackReferencedProjectOutputs" DependsOnTargets="BuildOnlySettings;ResolveReferences">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" />
    </ItemGroup>
  </Target>

</Project>
